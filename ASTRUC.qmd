---
title: "ASTRUC"
author: "Jean-Baptiste Astruc"
format: html
---

# Main data set import

## Question 1

We created a data folder to store the files.

## Question 2

You can find [here](https://github.com/JBA15/stars) the URL to the repository containing the project on Github.

```{r}
#| message: false
here::i_am("stars.Rproj")
library(here)
library(vroom)
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
library(stringr)
theme_set(theme_bw())
```

## Question 3

Let's load the main data set.

```{r}
planets <- vroom(here("data", "all-planets.csv"),
                 na = "Unknown",
                 locale = locale(decimal_mark = ","),
                 col_types = cols(
                   Planet_key = col_double(),
                   planet = col_character(),
                   STAR_CODE = col_double(),
                   `relative mass` = col_double(),
                   `Relative Density` = col_double(),
                   `RADIUS (EARTH)` = col_double(),
                   `Type Of Terrain` = col_character(),
                   `Climate Type` = col_character()
                 ))
```

```{r}
if (nrow(planets) == 902 & ncol(planets) == 8) {
  print("The loading process went great!")
} else {
  print("The loading process did not go well!")
}
```
Moreover, we loaded the data in order to have numerical variables recognised as numerical variables.

## Question 4

```{r}
num_planets <- nrow(planets)
num_variables <- ncol(planets)
```

```{r}
num_missing_values <- sapply(planets, function(x) sum(is.na(x)))
obs_with_missing <- sum(apply(planets, 1, function(x) any(is.na(x))))
```

```{r}
planets_summary <- data.frame(
  Attribute = c("Number of planets", 
                "Number of variables",
                paste("Missing Values in '", names(num_missing_values), "'", sep = ""),
                "Number of missing values in relative mass"),
  Value = c(
    num_planets,
    num_variables,
    num_missing_values,
    obs_with_missing
  )
)
knitr::kable(planets_summary, caption = "Check for the validity of the loading process for planets")
```

## Question 5

```{r}
planets_no_na <- planets |>
  drop_na(`relative mass`) |>
  drop_na(`Relative Density`) |>
  drop_na(`RADIUS (EARTH)`)

ggplot(planets_no_na, aes(x = `Relative Density`, y = `relative mass`)) +
  geom_point() +
  ggtitle("The mass of a planet as a function of its density") +
  xlab("Relative density") +
  ylab("Relative mass")
```

## Question 6

```{r}
extreme_planets <- function(df, variable) {
  max_row <- df %>%
    filter(.[[variable]] == max(.[[variable]], na.rm = TRUE)) %>%
    select(planet, Value = !!variable) %>%
    mutate(Variable = variable, Extremity = "Max")

  min_row <- df %>%
    filter(.[[variable]] == min(.[[variable]], na.rm = TRUE)) %>%
    select(planet, Value = !!variable) %>%
    mutate(Variable = variable, Extremity = "Min")

  rbind(max_row, min_row)
}

extremes_mass <- extreme_planets(planets, "relative mass")
extremes_density <- extreme_planets(planets, "Relative Density")
extremes_radius <- extreme_planets(planets, "RADIUS (EARTH)")

extreme_planets <- rbind(extremes_mass, extremes_density, extremes_radius)

kable(extreme_planets, format = "markdown", col.names = c("Planet Name", "Value", "Variable", "Extremity"))
```

# Improved data representation

## Question 7

```{r}
terrain_list <- str_split(planets[["Type Of Terrain"]], ";")

terrain <- tibble(
  planet_identifier = rep(planets[["Planet_key"]], sapply(terrain_list, length)),
  type_of_terrain = unlist(terrain_list)
  ) |>
  distinct()

climate_list <- str_split(planets[["Climate Type"]], ";")

climate <- tibble(
  planet_identifier = rep(planets[["Planet_key"]], sapply(climate_list, length)),
  climate_type = unlist(climate_list)
  ) |>
  distinct()

head(terrain)
head(climate)
```



























